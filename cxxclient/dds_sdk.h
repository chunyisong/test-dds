// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file dds_sdk.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DDS_SDK_H_
#define _FAST_DDS_GENERATED_DDS_SDK_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DDS_SDK_SOURCE)
#define DDS_SDK_DllAPI __declspec( dllexport )
#else
#define DDS_SDK_DllAPI __declspec( dllimport )
#endif // DDS_SDK_SOURCE
#else
#define DDS_SDK_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DDS_SDK_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



typedef uint16_t MeasurementKind;

const MeasurementKind MK_ANALOG = 65535;
const MeasurementKind MK_DISCRETE = 65534;


/*!
 * @brief This class represents the union MValue defined by the user in the IDL file.
 * @ingroup dds_sdk
 */
class MValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MValue that will be copied.
     */
    eProsima_user_DllExport MValue(
            const MValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MValue that will be copied.
     */
    eProsima_user_DllExport MValue(
            MValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MValue that will be copied.
     */
    eProsima_user_DllExport MValue& operator =(
            const MValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MValue that will be copied.
     */
    eProsima_user_DllExport MValue& operator =(
            MValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x MValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x MValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MValue& x) const;

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            MeasurementKind __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport MeasurementKind _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport MeasurementKind& _d();

    /*!
     * @brief This function sets a value in member av
     * @param _av New value for member av
     */
    eProsima_user_DllExport void av(
            float _av);

    /*!
     * @brief This function returns the value of member av
     * @return Value of member av
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float av() const;

    /*!
     * @brief This function returns a reference to member av
     * @return Reference to member av
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float& av();


    /*!
     * @brief This function sets a value in member dv
     * @param _dv New value for member dv
     */
    eProsima_user_DllExport void dv(
            uint32_t _dv);

    /*!
     * @brief This function returns the value of member dv
     * @return Value of member dv
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint32_t dv() const;

    /*!
     * @brief This function returns a reference to member dv
     * @return Reference to member dv
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint32_t& dv();

private:

    MeasurementKind m__d;

    float m_av{0.0};
    uint32_t m_dv{0};
};


/*!
 * @brief This class represents the structure MeasurementValue defined by the user in the IDL file.
 * @ingroup dds_sdk
 */
class MeasurementValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MeasurementValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MeasurementValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MeasurementValue that will be copied.
     */
    eProsima_user_DllExport MeasurementValue(
            const MeasurementValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MeasurementValue that will be copied.
     */
    eProsima_user_DllExport MeasurementValue(
            MeasurementValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MeasurementValue that will be copied.
     */
    eProsima_user_DllExport MeasurementValue& operator =(
            const MeasurementValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MeasurementValue that will be copied.
     */
    eProsima_user_DllExport MeasurementValue& operator =(
            MeasurementValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x MeasurementValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MeasurementValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x MeasurementValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MeasurementValue& x) const;

    /*!
     * @brief This function sets a value in member rid
     * @param _rid New value for member rid
     */
    eProsima_user_DllExport void rid(
            uint64_t _rid);

    /*!
     * @brief This function returns the value of member rid
     * @return Value of member rid
     */
    eProsima_user_DllExport uint64_t rid() const;

    /*!
     * @brief This function returns a reference to member rid
     * @return Reference to member rid
     */
    eProsima_user_DllExport uint64_t& rid();


    /*!
     * @brief This function sets a value in member q
     * @param _q New value for member q
     */
    eProsima_user_DllExport void q(
            uint16_t _q);

    /*!
     * @brief This function returns the value of member q
     * @return Value of member q
     */
    eProsima_user_DllExport uint16_t q() const;

    /*!
     * @brief This function returns a reference to member q
     * @return Reference to member q
     */
    eProsima_user_DllExport uint16_t& q();


    /*!
     * @brief This function copies the value in member v
     * @param _v New value to be copied in member v
     */
    eProsima_user_DllExport void v(
            const MValue& _v);

    /*!
     * @brief This function moves the value in member v
     * @param _v New value to be moved in member v
     */
    eProsima_user_DllExport void v(
            MValue&& _v);

    /*!
     * @brief This function returns a constant reference to member v
     * @return Constant reference to member v
     */
    eProsima_user_DllExport const MValue& v() const;

    /*!
     * @brief This function returns a reference to member v
     * @return Reference to member v
     */
    eProsima_user_DllExport MValue& v();

private:

    uint64_t m_rid{0};
    uint16_t m_q{0};
    MValue m_v;

};

#endif // _FAST_DDS_GENERATED_DDS_SDK_H_




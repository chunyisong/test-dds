// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file dds_sdk.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "dds_sdk.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




MValue::MValue()
{
    m__d = MK_ANALOG;
}

MValue::~MValue()
{
}

MValue::MValue(
        const MValue& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case MK_ANALOG:
            m_av = x.m_av;
            break;


        case MK_DISCRETE:
            m_dv = x.m_dv;
            break;

        default:
            break;
    }
}

MValue::MValue(
        MValue&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case MK_ANALOG:
            m_av = x.m_av;
            break;


        case MK_DISCRETE:
            m_dv = x.m_dv;
            break;

        default:
            break;
    }
}

MValue& MValue::operator =(
        const MValue& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case MK_ANALOG:
            m_av = x.m_av;
            break;


        case MK_DISCRETE:
            m_dv = x.m_dv;
            break;

        default:
            break;
    }

    return *this;
}

MValue& MValue::operator =(
        MValue&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case MK_ANALOG:
            m_av = x.m_av;
            break;


        case MK_DISCRETE:
            m_dv = x.m_dv;
            break;

        default:
            break;
    }

    return *this;
}

bool MValue::operator ==(
        const MValue& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case MK_ANALOG:
            return (m_av == x.m_av);
            break;


        case MK_DISCRETE:
            return (m_dv == x.m_dv);
            break;

        default:
            break;
    }
    return false;
}

bool MValue::operator !=(
        const MValue& x) const
{
    return !(*this == x);
}

void MValue::_d(
        MeasurementKind __d)
{
    bool b = false;

    switch (m__d)
    {
        case MK_ANALOG:
            switch (__d)
            {
                case MK_ANALOG:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case MK_DISCRETE:
            switch (__d)
            {
                case MK_DISCRETE:
                    b = true;
                    break;
                default:
                    break;
            }
            break;

        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

MeasurementKind MValue::_d() const
{
    return m__d;
}

MeasurementKind& MValue::_d()
{
    return m__d;
}

void MValue::av(
        float _av)
{
    m_av = _av;
    m__d = MK_ANALOG;

}

float MValue::av() const
{
    bool b = false;

    switch (m__d)
    {
        case MK_ANALOG:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_av;
}

float& MValue::av()
{
    bool b = false;

    switch (m__d)
    {
        case MK_ANALOG:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_av;
}


void MValue::dv(
        uint32_t _dv)
{
    m_dv = _dv;
    m__d = MK_DISCRETE;

}

uint32_t MValue::dv() const
{
    bool b = false;

    switch (m__d)
    {
        case MK_DISCRETE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_dv;
}

uint32_t& MValue::dv()
{
    bool b = false;

    switch (m__d)
    {
        case MK_DISCRETE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_dv;
}




MeasurementValue::MeasurementValue()
{
}

MeasurementValue::~MeasurementValue()
{
}

MeasurementValue::MeasurementValue(
        const MeasurementValue& x)
{
    m_rid = x.m_rid;
    m_q = x.m_q;
    m_v = x.m_v;
}

MeasurementValue::MeasurementValue(
        MeasurementValue&& x) noexcept
{
    m_rid = x.m_rid;
    m_q = x.m_q;
    m_v = std::move(x.m_v);
}

MeasurementValue& MeasurementValue::operator =(
        const MeasurementValue& x)
{

    m_rid = x.m_rid;
    m_q = x.m_q;
    m_v = x.m_v;
    return *this;
}

MeasurementValue& MeasurementValue::operator =(
        MeasurementValue&& x) noexcept
{

    m_rid = x.m_rid;
    m_q = x.m_q;
    m_v = std::move(x.m_v);
    return *this;
}

bool MeasurementValue::operator ==(
        const MeasurementValue& x) const
{
    return (m_rid == x.m_rid &&
           m_q == x.m_q &&
           m_v == x.m_v);
}

bool MeasurementValue::operator !=(
        const MeasurementValue& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member rid
 * @param _rid New value for member rid
 */
void MeasurementValue::rid(
        uint64_t _rid)
{
    m_rid = _rid;
}

/*!
 * @brief This function returns the value of member rid
 * @return Value of member rid
 */
uint64_t MeasurementValue::rid() const
{
    return m_rid;
}

/*!
 * @brief This function returns a reference to member rid
 * @return Reference to member rid
 */
uint64_t& MeasurementValue::rid()
{
    return m_rid;
}


/*!
 * @brief This function sets a value in member q
 * @param _q New value for member q
 */
void MeasurementValue::q(
        uint16_t _q)
{
    m_q = _q;
}

/*!
 * @brief This function returns the value of member q
 * @return Value of member q
 */
uint16_t MeasurementValue::q() const
{
    return m_q;
}

/*!
 * @brief This function returns a reference to member q
 * @return Reference to member q
 */
uint16_t& MeasurementValue::q()
{
    return m_q;
}


/*!
 * @brief This function copies the value in member v
 * @param _v New value to be copied in member v
 */
void MeasurementValue::v(
        const MValue& _v)
{
    m_v = _v;
}

/*!
 * @brief This function moves the value in member v
 * @param _v New value to be moved in member v
 */
void MeasurementValue::v(
        MValue&& _v)
{
    m_v = std::move(_v);
}

/*!
 * @brief This function returns a constant reference to member v
 * @return Constant reference to member v
 */
const MValue& MeasurementValue::v() const
{
    return m_v;
}

/*!
 * @brief This function returns a reference to member v
 * @return Reference to member v
 */
MValue& MeasurementValue::v()
{
    return m_v;
}


// Include auxiliary functions like for serializing/deserializing.
#include "dds_sdkCdrAux.ipp"

